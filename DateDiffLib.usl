/*
University of Washington
Classroom Technology & Events
David Cornwell
*/

//Compiler Directives

//Set this constant to 1 to print to librarydebugger.
#Define_Constant librarydebug 0

//Global Variables
//integer gl_err;

//Functions

long_integer_function check_for_leapyears(signed_long_integer startyear, signed_long_integer endyear)
{
	//This function counts the number of leapyears between/including startyear and endyear.
	
 	signed_long_integer i, ly, leapyears;
 	
 	//Determine if the dates were entered backwards (as will happen with BCE dates)
 	if(startyear > endyear)
	{
		i = startyear;
		startyear = endyear;
		endyear = i;		
	}

 	
 	for(i = startyear to endyear)
 	{
 		if(i mod 400 = 0) ly = 1;
  		else if(i mod 100 = 0) ly = 0;
  		else if(i mod 4 = 0) ly = 1; 
  		else ly = 0;
  		
  		if(ly = 1) leapyears = leapyears + 1;
 	}
 	
 	return(leapyears);
}

integer_function days_in_month(long_integer monthnum)
{
	//This function determines the number of days in a given month.
	//monthnum should be the numerical value of the month to be calculated.
	
	integer mlength;
	
	switch(monthnum) 
 	{
 		case(1): mlength = 31;
 		//We'll assume February only has 28 days for now and fix it in post.
 		case(2): mlength = 28;
		case(3): mlength = 31;
		case(4): mlength = 30;
		case(5): mlength = 31;
		case(6): mlength = 30;
    	case(7): mlength = 31;
    	case(8): mlength = 31;
    	case(9): mlength = 30;
    	case(10): mlength = 31;
    	case(11): mlength = 30;
    	case(12): mlength = 31;
    	//default: gl_err = 4;
    }
    
    return(mlength);
}

long_integer_function days_from_zero(long_integer i_day, long_integer i_mon, signed_long_integer i_yr, integer bce)
{	
	//This function calculates the number of days that have passed between the year 0 and a date specified
	//with i_day, i_mon, and i_yr.  Integer bce determines if the year value is negative.  1 = negative, all other values = not negative.
	
	integer i;
	long_integer monthdays;
	signed_long_integer dist;
	
 	//Add up days from years.
  	//check to see if it's after february, add a day if it is and it's a leap year.
    if(i_mon > 2) dist = (i_yr * 365) + check_for_leapyears(0, i_yr);
    else if(i_mon <= 2) dist = (i_yr * 365) + check_for_leapyears(0, i_yr - 1);
    
	//Account for BCE dates.
	if(bce)
	{
		dist = (dist * -1);
		if(librarydebug) print("We have a BCE value!");
    }
    else dist = dist - 367;
    
    if(librarydebug) print("Days from 1/1/1 to date, including leap years: %ld", dist);
  	  	
  	//Add up days from months.
  	//Make sure it's past the end of January, then add up all of the days in all of the months before
  	//the current month during the year until now.
  	if(i_mon > 1)
  	{
  		monthdays = 0;
  		
  		for(i = 1 to i_mon - 1) monthdays = monthdays + days_in_month(i);
  		dist = dist + monthdays;
  		
  		if(librarydebug) print("Days in all of the months from the start of the year to date: %ld", monthdays);
  	}
  	
  	//Add in days since the start of the month.
 	dist = dist + i_day;
 	
 	return(dist);
}

integer_function check_syntax(long_integer i_day, long_integer i_mon, long_integer i_yr)
{
 	//This function checks the user input, via i_day, i_mon, and i_yr, to ensure that
 	//the start and end dates are valid dates.
 	//We'll return 0 if they're valid dates, or an error code if they're not.
 	
 	integer i;
 	
 	i = 0;
 	 	
 	//Start by checking years.
 	if(i_yr = 0) i = 1;
 	
 	//Then, check months.
 	if(i_mon > 12 || i_mon < 1) i = 2;
 	
 	//Finally, check days.
 	if(i_day < 1 || i_day > days_in_month(i_mon)) i = 3;
 	
 	return(i);
}

string_function GetDateDiffLong(string startdate, string enddate, string starttime, string endtime, integer startisbce, integer endisbce)
{
 	signed_long_integer start[6], end[6], i, daysfrommonths, startdist, enddist, diff[4];
 	integer temperr, loc1, loc2, gl_err;
 	string datediff[128];
 	/*
 	
 	start/end definitions:
 	
 	0 = day
 	1 = month
 	2 = year
 	3 = hours
 	4 = minutes
 	5 = seconds
 	
 	diff definitons:
 	
 	0 = days
 	1 = hours
 	2 = minutes
 	3 = seconds
 	
 	*/
 		
	//Set global error variable to 0. Let's see if we make it through the rest of this without changing it.
	gl_err = 0;
	
	//Poplated arrays by parsing the date input strings.
	loc1 = find("/", startdate);
	loc2 = find("/", startdate, loc1 + 1);
 	start[0] = atol(mid(startdate, loc1 + 1, loc2 - loc1));
 	start[1] = atol(left(startdate, len(startdate) - loc1 + 1));
 	start[2] = atol(right(startdate, len(startdate) - loc2));
 	
 	if(librarydebug) print("Current start date values %ld/%ld/%ld and loc values %d - %d", start[1], start[0], start[2], loc1, loc2);
 	
	loc1 = find("/", enddate);
	loc2 = find("/", enddate, loc1 + 1);
 	end[0] = atol(mid(enddate, loc1 + 1, loc2 - loc1));
 	end[1] = atol(left(enddate, len(enddate) - loc1 + 1));
 	end[2] = atol(right(enddate, len(enddate) - loc2));

 	if(librarydebug) print("Current end date values %ld/%ld/%ld", end[1], end[0], end[2]);
 	
 	loc1 = find(":", starttime);
	loc2 = find(":", starttime, loc1 + 1);
 	start[3] = atol(left(starttime, len(starttime) - loc1 + 1));
 	start[4] = atol(mid(starttime, loc1 + 1, loc2 - loc1));
 	start[5] = atol(right(starttime, len(starttime) - loc2));
 	
 	if(librarydebug) print("Current start time values %ld:%ld:%ld and loc values %d - %d", start[3], start[4], start[5], loc1, loc2);
 	
	loc1 = find(":", endtime);
	loc2 = find(":", endtime, loc1 + 1);
 	end[3] = atol(left(endtime, len(endtime) - loc1 + 1));
 	end[4] = atol(mid(endtime, loc1 + 1, loc2 - loc1));
 	end[5] = atol(right(endtime, len(endtime) - loc2));

 	if(librarydebug) print("Current end time values %ld:%ld:%ld", end[3], end[4], end[5]);
 	
 	//Let's make sure that the user input reasonable values.
 	temperr = check_syntax(start[0], start[1], start[2]);
 	if(temperr != 0) gl_err = temperr;
 	temperr = check_syntax(end[0], end[1], end[2]) * 10;
 	if(temperr != 0) gl_err = temperr;
 	
 	//Calculate how many days from year zero this is.
  	startdist = days_from_zero(start[0], start[1], start[2], startisbce);
  	enddist = days_from_zero(end[0], end[1], end[2], endisbce);
 	
 	if(librarydebug) print("All days from 1/1/1 to start date: %ld", startdist);
 	if(librarydebug) print("All days from 1/1/1 to end date: %ld", enddist);
 	
 	
 	/*
 	
 	Removing this bit because it will screw up some things.
 	 	
 	//Find which is earlier, start or end, then find the difference.
 	if(startdist = enddist) diff = 0;
 	else if(startdist > enddist) diff = startdist - enddist;
 	else if(startdist < enddist) diff = enddist - startdist;
 	
 	*/
 	
 	//Calculate the day difference
 	diff[0] = enddist - startdist;
 	//and the hour difference
 	diff[1] = end[3] - start[3];
 	//and the minutes difference
 	diff[2] = end[4] - start[4];
 	//and the seconds difference.
 	diff[3] = end[5] - start[5];
 	
 	//Make sure that our seconds difference makes sense.
 	if(diff[3] < 0)
 	{
 		diff[3] = diff[3] + 60;
 		diff[2] = diff[2] - 1;
 	}
 	//Now check our minutes difference.
 	if(diff[2] < 0)
 	{
 		diff[2] = diff[2] + 60;
 		diff[1] = diff[1] - 1;
 	}
 	//And now the hours difference.
 	if(diff[1] < 0)
 	{
 		diff[1] = diff[1] + 24;
 		diff[0] = diff[0] - 1;
 	}
 	
 	
 	if(gl_err != 0)
 	{
 		if(librarydebug) print("******* ERROR *******");
 	}
 	else if(librarydebug) print("Difference is %ld", diff[0]);
 	
 	if(librarydebug) print("gl_error is %d", gl_err);
    
    //Populate output string.  This will be the number of days in difference between the two dates, or an error string.
    switch(gl_err)
    {
		case(0): 
		{
			datediff = ltoa(diff[0]) + "." + ltoa(diff[1]) + "." + ltoa(diff[2]) + "." + ltoa(diff[3]);
		}			
		case(1): datediff = "Error: Bad starting year value (probably because there's no year 0)";
		case(2): datediff = "Error: Bad starting month value (out of range)";
		case(3): datediff = "Error: Bad starting day value (out of range)";
		case(4): datediff = "Error: That's not a real month!";
		case(10): datediff = "Error: Bad ending year value (probably because there's no year 0)";
		case(20): datediff = "Error: Bad ending month value (out of range)";
		case(30): datediff = "Error: Bad ending day value (out of range)";
		default: datediff = "Error: Unknown (how did you get this message?)";
	}
	
	return(datediff);
}

string_function GetDateDiff(string startdate, string enddate, string starttime, string endtime)
{	
	return(GetDateDiffLong(startdate, enddate, starttime, endtime, 0, 0));
}

string_function GetDateDiffNow(string startdate, string starttime)
{
	return(GetDateDiffLong(startdate, date(1), starttime, time(), 0, 0));
}
